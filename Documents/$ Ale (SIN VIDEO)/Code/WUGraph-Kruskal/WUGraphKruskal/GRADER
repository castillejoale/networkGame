GRADER - pj3

Partner submitting: Shir Nehama, cs61b-my
Partner 1: Emily Gilden, cs61b-aiv
Partner 2: Alejandro Castillejo, cs61b-ayy

Data Structures:

    1. List

	    A. DList

		We use two DLists in our implementation: one to store each vertex in the WUGraph (vertexList), and one to store all the edges associated with each vertex (edgeList). To add to either DList, you must hash the item through its respective hash table.

		Each DListNode in the vertexList has a VertexNode item, which has three 		fields:
			1. a reference to the appVertex, which is the input of our addVertex() method
			2. an edgeList, which is a DList of all the edges corresponding to that vertex
			3. the degreeCount of the vertex, stored as an int

		Each DListNode in the edgeList has an edgeNode item, which uses up to five 		fields: 
			1. the weight of each edge, stored as an int
			2. the edgeType, stored as a static, final int, either SELF or NONSELF
			3(&4). a reference to the DListNode of each vertex in the vertexList that makes the edge (one vertex in a SELF edge, two in a NONSELF edge)
			5. for NONSELF edges only, a reference to the DListNode parterEdge, which is the edge in the other vertex's edgeList that make up the two vertices of the given edge. A NONSELF edge shows up in two edgeLists of two vertices in vertexList, and each have a reference called partnerEdge that point to each other.

		B. SListNode

		Directly used without the need of the class SList. Used by LinkedQueue where the queues in the queue are represented as SListNodes

	
	2. Dictionary - HashTableChained
	
	Each WUGraph object has two instances of HashTableChained: a vertexHashTable and an edgeHashTable.

	The vertexHashTable is initialized in the WUGraph constructor.  To insert into the vertexHashTable, we enter the key, which is the Object vertex that is the input of the addVertex() method, and the value, which is the internal representation of the vertex, found in the vertexList.

	The edgeHashTable is initialized in the addEdge() method.  If the edgeHashTable is 	null when addEdge() is called, that means the graph currently does not have edges, 	and a new HashTableChained object, edgeHashTable, is initialized.  To insert into 	the edgeHashTable, we enter the key, which is an object of the VertexPair class, 	created using the two vertex Objects received in the input, and the value, which 	is the internal representation of the edge, found in the edgeList for either of 	the vertices that make up the edge (we default to "vertexDListNode1").

	We added a new method to HashTabledChained called resize().  We call resize() after every insert() call to either hash table.  This method resizes the hash table when the load factor exceeds 0.75.

	3. Queue - LinkedQueue

	The LinkedQueue is used when we want to create a queue of queues. Used in Kruskal algorithm to separate diffent queues linked by edges that are in different sets.

	It contains: size(), isEmpty(), enqueue(), dequeue(), front(), nth(), append(), toString(). Each of the methods described in the LinkedQueue file.



Design Decisions:

Our implementation of WUGraph very close imitates the pj3graph diagram given to us to complement the readme.  We have two hash tables, one for vertices, and one for edges.  We have a DList that holds all the vertices, and each vertex has an adjacency DList that holds its edge.  We create partner references for non self edges. Each edge has references that point to its internal representation of the vertices creating that edge, and each vertex has a reference pointing to its external vertex Object.

To get removeVertex() to run in O(d) time, we create a loop that accesses the adjacency DList of the given vertex and removes each edge (and its partner if necessary) one at a time.  The loop terminates once the adjacency list is empty.  Then, the vertex is removed from the vertex DList and then from the hash table.  If the vertex has no edges, these final steps would happen anyway.  Therefore, the time to remove the vertex is only dependent on the size of the adjacency list, which is equal to the degree of the vertex.

To make getVertices() running in O(|V|) time, we create an object array of the size of the vertexList, that will ultimately be the output.  Then, we loop through the vertex DList and access the Objects that correspond with each vertex, and add them to the output array.  Creating the object array is a constant time process, so this method is only dependent on the size of the vertex DList, which is equal to the number of vertices in the WUGraph.

Our implementation of Kruskal.java contains minSpanTree() running in O(|V| + |E| log |E|) time. We first create an empty tree without edges. Then we make a list of object of the Class Edge and sort this list from minimum to maximum weight of each edge using the mergesort algorithm. Finally we create a disjoint set and we start only adding the edges, from minimun to maximum weight, which two vertices belong to different sets.

