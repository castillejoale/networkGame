GRADER

Name of student running submit: Alejandro Castillejo Muñoz
Login of student running submit: cs61b-ayy

Second team member's name: Shir Nehama
Second team member's login: cs61b-my

Third team member's name (if any): Emily Gilden
Third team member's login: cs61b-aiv

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
1. Does your program compile without errors?
Yes!

2.Have you tested your program on the 61B lab machines?
Yes!

3.Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?

We successfully implemented the game tree search and alpha-beta pruning. 
There are no limitations to the alpha-beta pruning. 
Our default search depth in the one-parameter MachinePlayer constructor is set to two.

4. Describe your board evaluation function in some detail.

Our game boards will be given a (double type) score between -1.0 and 1.0. Since the Machine Player is a max player through the alpha beta pruning implementation, he will choose the board score that is most positive. The opponent, a min player, will choose the board with a score that is most negative. 

To assign a board a score, we first check if there is a network on the board. If a board gets a network with 1 move, then it will get a score
of 1 (for Machine Player) or -1 (for opponent player). For every move that needs to be made to reach that network, we penalize the 
score by 0.01 so it is less attractive to the player. Any network that is reached with more than 10 moves will get a penalized score of 0.1
Therefore, a board with a network will have an absolute score between 0.9 and 1.0. 

If the board does not have a network, We give a score based on the difference between the total number of connections on the 
board for the current player and the current player's opponent. We note that an upper bound limit (that is impossible) for the 
total number of connections on the board for a player is 0 and the lower bound limit is 0. Therefore, the maximum difference 
between the total number of connections on the board of the current and opponent player is 80-0 = 80 and the minimum difference
is 0-80 = -80. To fit our scale of -1.0 and 1.0, we assign a board a score of
[(# connections on the board for the current player) - (# connections for opponent player)] / 100.0.


5. Does your MachinePlayer use any special method of choosing the first few moves?

Our MachinePlayer chooses the best move from a list of all valid Moves.  
If there is more than one best move, our MachinePlayer returns the first best Move. 


6. Is there anything else the graders should know to help them read your project?
No

Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's comments.

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.

Classes:

1. GameBoard.java

This class holds our MachinePlayer's own copy of the game board so that it can perform a game tree search and evaluation function algorithms.  It is a two dimensional array of Squares, which store whether a square in the game board is occupied with a black or white chip, or unoccupied, and gives information about the Square to be used to find a network. Important methods in this class are the evaluation function, which evaluates the GameBoard, allValidMoves(Move m, int sidecolor), which returns a doubly linked list of all the valid Moves on the current board, and hasValidNetwork(int sidecolor) that determines if there is a Network for a given side on the current board.

2. Square.java

This class is used exclusively by GameBoard to create a new instance of GameBoard, which is a two dimensional array of Squares. Each GameBoard is 8x8, so there are always 64 Squares in each instance of a GameBoard. A Square keeps record of what color chip (if any) is on it, its location, and whether it has been visited for the 
hasValidNetwork(int sidecolor) algorithm. A Square keeps track of whether it is a square in the beginning or end lines of a board or if it in the middle of the board.

3. MachinePlayer.java

This class creates a player of the game Network that selects the best, most strategic move given the current board. 
We implemented all the methods provided in the MachinePlayer template in the pj2 directory, and added one extra method, alphaBetaPruning(boolean side, double alpha, double beta, GameBoard gb, int depthCounter), that chooseMove() uses to select the best move using mini-max and alpha-beta pruning. alphaBetaPruning() returns an object of the class Best, which holds a Move and the score for that Move from the evaluation function. The chooseMove() and opponentMove() methods will update the internal game board stored in the MachinePlayer once the best move is found (when chooseMove() is called) or when a move is passed to the opponentPlayer. 

4. Best.java

The Best class is a helper class we use when implementing the mini max algorithm. Whenever we need to evaluate a move that is made on a given game board, we store the move and the score (assigned by the evaluation function) in a new Best class. The Best class only contains two fields: Move and Score and only consists of getter and setter methods. 

5. Move.java

This class was provided in the pj2 directory, and we did not implement or add to it, nor did we create a subclass of Move. We utilized all of its public fields and methods to account for the differences in implementation of certain methods depending
on whether a Move was an ADD move or a STEP Move, as well as theoretically add Moves to our GameBoard for tests.

6. DList.java and DListNode.java

We used this class, which uses also uses DListNode.java and InvalidNodeException.java, to hold Moves.We used Alejandro's homework 5 implementation. The DList is a subclass of the List class and the DListNode is a subclass of the ListNode class. The allValidMoves(int sidecolor) method, implemented in the GameBoard class returns a DList of Moves that the MachinePlayer uses to choose the best Move.  hasValidNetwork(int sidecolor) uses a helper method
that also utilizes a DList to check the connections a chip has to other chips on the game board. 

Modules:

1. Validity & GameBoard
  implemented in: GameBoard.java
  implemented by: Emily Gilden 
  implementation:
  /**
  * allValidMoves(int sidecolor) returns a DList of all Moves m such that isValidMove(Move m, int sidecolor),
  * a helper method, returns true.
  * This method will either return a list of all ADD Moves, or all STEP Moves.
  * isValidMove(Move m, int sidecolor) checks four things to see if a Move is valid.
  * 1. The Move is within the bounds of the GameBoard for the given chip color.
  * 2. The Move does not move to an occupied Square.
  * 3. The Move does not form a cluster.
  * 4. An ADD Move is only taken if there are less than 10 chips on the board, and
  *    a STEP Move is only taken if there are already 10 chips on the board.
  * Clarifications of these rules can be found in the readme.
  * This method is in the GameBoard class.
  * @param int sidecolor 
  * @return a DList of all Moves m such that isValidMove(Move m) returns true.
  **/
  protected DList allValidMoves(int sidecolor)


/**
* The GameBoard class constructor creates an 8x8 GameBoard of unoccupied Squares such that each Square s.getColor() = -1 and
* sets the type (normal, beginning goal area or end goal area).
* This GameBoard is created at the beginning of a game in the MachinePlayer class and updated after each player makes a move. 
* @param machinePlayer
* @return nothing, it simply modifies the board field
**/
protected GameBoard(MachinePlayer machinePlayer)

2. Evaluation Function
  implemented in: GameBoard.java
  implemented by: Shir Nehama
  implementation: 

/**
* evaluateBoard() assigns scores to each board in the game tree search following our evaluation algorithm based on
* comparing first which player has a network and if not compare the number of total connections that each player has
* @param the depth level of our game tree search (an int), and the int sidecolor, the color of the player who placed the chip. 
* @return a score for the board (a double) between -1.0 and 1.0
**/
protected double evaluateBoard(int depth, int sidecolor) {


3. Game Tree Search
  implemented in: MachinePlayer.java
  implemented by: Shir Nehama	
  implementation:
  
  /**
  * chooseMove() does a game tree search with alpha-beta pruning on the current Machine Player's game board.
  * This method calls alphaBetaPruning method on the top node (gameBoard) of the tree that performs minimax.
  * If no "best" move is found, a valid move is returned to be played. 
  * @param none
  * @return a new valid move by "this" player.  Internally records the move (updates the internal game board) as a move by "this" player.
  **/
  public Move chooseMove()

  /**
  * alphaBetaPruning() is a helper method of chooseMove() that does a game tree search with alpha-beta pruning.
  * @param side, which is true if the player who will place the move is MachinePlayer, opponent otherwise. 
  * @param The alpha and beta values for alpha-beta pruning
  * @param gb is the game board we are visiting and depthCounter is the depth of this game                    board node from the root
  * @return the Best with the best Move and its evaluation score.
  **/
protected Best alphaBetaPruning(boolean side, double alpha, double beta, GameBoard gb, int depthCounter)


4. Network Finder
  implemented in: GameBoard.java
  implemented by: Alejandro Castillejo Muñoz
  implementation:
  /**
  *  hasValidNetwork(int sidecolor) determines whether "this" GameBoard has a valid network
  *  for the player with the chip color given as a parameter. 
  *  A full description of what constitutes a valid network appears in the
  *  project "readme" file.
  *
  *  @param int sidecolor (0 for black, 1 for white)
  *  @return true if player "side" has a winning network in "this" GameBoard;
  *          false otherwise.
  **/
  protected boolean hasValidNetwork(int sidecolor)
    

5. Lists
  implemented in: GameBoard.java, MachinePlayer.java
  implemented by: Alejandro Castillejo Muñoz, Shir Nehama, Emily Gilden
  implementation:

  /**
   *  DList() constructs for an empty DList.
   **/
  public DList()

/**
   *  insertBack() inserts an item at the back of this DList.
   *
   *  @param item is the item to be inserted.
   *
   *  Performance:  runs in O(1) time.
   **/
  public void insertBack(Object item)

/**removeBack() removes DListNode from list
  *
  **/
  public void removeBack()
